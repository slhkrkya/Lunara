
User Service API Documentation
===============================

1. User Login (Login Endpoint):
---------------------------------
- Endpoint: /api/users/login
- HTTP Method: POST
- Purpose: Authenticates the user and generates a JWT token.
- Requirements:
  - Send a JSON body:
    {
      "username": "userName",
      "password": "userPassword"
    }
  - Returns a JWT token upon successful authentication.

- Frontend Actions:
  - Store the token in localStorage or sessionStorage.
  - Include the token in the `Authorization` header for every request:
    Authorization: Bearer <token>

---------------------------------

2. User Operations (Protected Endpoints):
-----------------------------------------
- Endpoints:
  - /api/users (GET): Lists all users.
  - /api/users/id/{id} (GET): Retrieves a specific user by ID.
  - /api/users/username/{username} (GET): Retrieves a user by username.
  - /api/users/{id} (PUT): Updates a user by ID.
  - /api/users/{id} (DELETE): Deletes a user by ID.

- Frontend Actions:
  - Include the `Authorization: Bearer <token>` header for all requests.
  - Handle 403 (Forbidden) or 401 (Unauthorized) errors by prompting the user to log in again.

---------------------------------

3. Protected Endpoint Example:
-------------------------------
- Endpoint: /api/users/protected
- HTTP Method: GET
- Purpose: Validates the token and returns a welcome message for authenticated users.

- Frontend Actions:
  - Use this endpoint to check the validity of the user's session.
  - Example: After login, verify the user's token to ensure the session is active.

---------------------------------

4. Error Handling:
-------------------
- Common errors:
  - 401 Unauthorized: Token is missing or invalid.
  - 403 Forbidden: Access to the endpoint is restricted.
  - Invalid username or password: Incorrect credentials during login.

- Frontend Actions:
  - Display appropriate error messages to the user.
  - Redirect the user to the login page if the session has expired.

---------------------------------
